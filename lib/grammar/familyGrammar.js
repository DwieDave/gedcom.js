// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "structure", "symbols": ["FAMILY_ATTRIBUTE_STRUCTURE"]},
    {"name": "structure", "symbols": ["HUSB"]},
    {"name": "structure", "symbols": ["WIFE"]},
    {"name": "structure", "symbols": ["CHIL"]},
    {"name": "structure", "symbols": ["TEST"]},
    {"name": "Level", "symbols": [{"literal":"0"}]},
    {"name": "Level$ebnf$1", "symbols": []},
    {"name": "Level$ebnf$1", "symbols": ["Level$ebnf$1", "digit"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Level", "symbols": ["nonzero", "Level$ebnf$1"]},
    {"name": "D", "symbols": [/[ ]/]},
    {"name": "Xref$ebnf$1", "symbols": ["tagChar"]},
    {"name": "Xref$ebnf$1", "symbols": ["Xref$ebnf$1", "tagChar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Xref", "symbols": ["atsign", "Xref$ebnf$1", "atsign"]},
    {"name": "Tag", "symbols": ["stdTag"]},
    {"name": "Tag", "symbols": ["extTag"]},
    {"name": "LineVal", "symbols": ["pointer"]},
    {"name": "LineVal", "symbols": ["lineStr"]},
    {"name": "EOL$ebnf$1", "symbols": [/[\x0A]/], "postprocess": id},
    {"name": "EOL$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "EOL", "symbols": [/[\x0D]/, "EOL$ebnf$1"]},
    {"name": "EOL", "symbols": [/[\x0A]/]},
    {"name": "stdTag$ebnf$1", "symbols": []},
    {"name": "stdTag$ebnf$1", "symbols": ["stdTag$ebnf$1", "tagChar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "stdTag", "symbols": ["ucletter", "stdTag$ebnf$1"]},
    {"name": "extTag$ebnf$1", "symbols": ["tagChar"]},
    {"name": "extTag$ebnf$1", "symbols": ["extTag$ebnf$1", "tagChar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "extTag", "symbols": ["underscore", "extTag$ebnf$1"]},
    {"name": "tagChar", "symbols": ["ucletter"]},
    {"name": "tagChar", "symbols": ["digit"]},
    {"name": "tagChar", "symbols": ["underscore"]},
    {"name": "pointer", "symbols": ["voidPrt"]},
    {"name": "pointer", "symbols": ["Xref"]},
    {"name": "voidPrt$string$1", "symbols": [{"literal":"@"}, {"literal":"V"}, {"literal":"O"}, {"literal":"I"}, {"literal":"D"}, {"literal":"@"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "voidPrt", "symbols": ["voidPrt$string$1"]},
    {"name": "nonAt", "symbols": [/[^@\n]/]},
    {"name": "nonEOL", "symbols": [/[^\n]/]},
    {"name": "lineStr$ebnf$1", "symbols": []},
    {"name": "lineStr$ebnf$1", "symbols": ["lineStr$ebnf$1", "nonEOL"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "lineStr", "symbols": ["nonAt", "lineStr$ebnf$1"]},
    {"name": "lineStr$ebnf$2", "symbols": []},
    {"name": "lineStr$ebnf$2", "symbols": ["lineStr$ebnf$2", "nonEOL"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "lineStr", "symbols": ["atsign", "atsign", "lineStr$ebnf$2"]},
    {"name": "digit", "symbols": [/[0-9]/]},
    {"name": "nonzero", "symbols": [/[1-9]/]},
    {"name": "ucletter", "symbols": [/[A-Z]/]},
    {"name": "underscore", "symbols": [{"literal":"_"}]},
    {"name": "atsign", "symbols": [{"literal":"@"}]},
    {"name": "newLine", "symbols": [{"literal":"\n"}]},
    {"name": "banned", "symbols": [/[\x00-\x08]/]},
    {"name": "banned", "symbols": [/[\x0B-\x0C]/]},
    {"name": "banned", "symbols": [/[\x0E-\x1F]/]},
    {"name": "banned", "symbols": [/[\x7F]/]},
    {"name": "banned", "symbols": [/[\x80-\x9F]/]},
    {"name": "notBanned", "symbols": [/[^\x00-\x08\x0B-\x0C\x0E-\x1F\x7F\x80-\x9F]/]},
    {"name": "anychar", "symbols": ["notBanned"]},
    {"name": "Text$ebnf$1", "symbols": []},
    {"name": "Text$ebnf$1", "symbols": ["Text$ebnf$1", "anychar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Text", "symbols": ["Text$ebnf$1"]},
    {"name": "Integer$ebnf$1", "symbols": ["digit"]},
    {"name": "Integer$ebnf$1", "symbols": ["Integer$ebnf$1", "digit"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Integer", "symbols": ["Integer$ebnf$1"]},
    {"name": "stdEnum", "symbols": ["stdTag"]},
    {"name": "stdEnum", "symbols": ["Integer"]},
    {"name": "Enum", "symbols": ["stdEnum"]},
    {"name": "Enum", "symbols": ["extTag"]},
    {"name": "Age$ebnf$1$subexpression$1", "symbols": ["ageBound", "D"]},
    {"name": "Age$ebnf$1", "symbols": ["Age$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "Age$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Age", "symbols": ["Age$ebnf$1", "ageDuration"]},
    {"name": "ageBound", "symbols": [{"literal":"<"}]},
    {"name": "ageBound", "symbols": [{"literal":">"}]},
    {"name": "years", "symbols": ["Integer", {"literal":"y"}]},
    {"name": "months", "symbols": ["Integer", {"literal":"m"}]},
    {"name": "weeks", "symbols": ["Integer", {"literal":"w"}]},
    {"name": "days", "symbols": ["Integer", {"literal":"d"}]},
    {"name": "ageDuration$ebnf$1$subexpression$1", "symbols": ["D", "months"]},
    {"name": "ageDuration$ebnf$1", "symbols": ["ageDuration$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "ageDuration$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ageDuration$ebnf$2$subexpression$1", "symbols": ["D", "weeks"]},
    {"name": "ageDuration$ebnf$2", "symbols": ["ageDuration$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "ageDuration$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ageDuration$ebnf$3$subexpression$1", "symbols": ["D", "days"]},
    {"name": "ageDuration$ebnf$3", "symbols": ["ageDuration$ebnf$3$subexpression$1"], "postprocess": id},
    {"name": "ageDuration$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ageDuration", "symbols": ["years", "ageDuration$ebnf$1", "ageDuration$ebnf$2", "ageDuration$ebnf$3"]},
    {"name": "ageDuration$ebnf$4$subexpression$1", "symbols": ["D", "weeks"]},
    {"name": "ageDuration$ebnf$4", "symbols": ["ageDuration$ebnf$4$subexpression$1"], "postprocess": id},
    {"name": "ageDuration$ebnf$4", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ageDuration$ebnf$5$subexpression$1", "symbols": ["D", "days"]},
    {"name": "ageDuration$ebnf$5", "symbols": ["ageDuration$ebnf$5$subexpression$1"], "postprocess": id},
    {"name": "ageDuration$ebnf$5", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ageDuration", "symbols": ["months", "ageDuration$ebnf$4", "ageDuration$ebnf$5"]},
    {"name": "ageDuration$ebnf$6$subexpression$1", "symbols": ["D", "days"]},
    {"name": "ageDuration$ebnf$6", "symbols": ["ageDuration$ebnf$6$subexpression$1"], "postprocess": id},
    {"name": "ageDuration$ebnf$6", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ageDuration", "symbols": ["weeks", "ageDuration$ebnf$6"]},
    {"name": "ageDuration", "symbols": ["days"]},
    {"name": "HUSB$string$1", "symbols": [{"literal":"H"}, {"literal":"U"}, {"literal":"S"}, {"literal":"B"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "HUSB", "symbols": [{"literal":"1"}, "D", "HUSB$string$1", "D", "Xref"]},
    {"name": "HUSB", "symbols": ["HUSB", "newLine", "PHRASE"]},
    {"name": "WIFE$string$1", "symbols": [{"literal":"W"}, {"literal":"I"}, {"literal":"F"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "WIFE", "symbols": [{"literal":"1"}, "D", "WIFE$string$1", "D", "Xref"]},
    {"name": "WIFE", "symbols": ["WIFE", "newLine", "PHRASE"]},
    {"name": "CHIL$string$1", "symbols": [{"literal":"C"}, {"literal":"H"}, {"literal":"I"}, {"literal":"L"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "CHIL", "symbols": [{"literal":"1"}, "D", "CHIL$string$1", "D", "Xref"]},
    {"name": "CHIL", "symbols": ["CHIL", "newLine", "PHRASE"]},
    {"name": "TEST$string$1", "symbols": [{"literal":"T"}, {"literal":"E"}, {"literal":"S"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "TEST", "symbols": ["Level", "D", "TEST$string$1", "D", "Age"]},
    {"name": "FAMILY_ATTRIBUTE_STRUCTURE", "symbols": ["NCHI"]},
    {"name": "FAMILY_ATTRIBUTE_STRUCTURE", "symbols": ["RESI"]},
    {"name": "FAMILY_ATTRIBUTE_STRUCTURE", "symbols": ["FACT"]},
    {"name": "NCHI$string$1", "symbols": [{"literal":"N"}, {"literal":"C"}, {"literal":"H"}, {"literal":"I"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "NCHI", "symbols": ["Level", "D", "NCHI$string$1", "D", "Integer"]},
    {"name": "NCHI", "symbols": ["NCHI", "newLine", "TYPE"]},
    {"name": "RESI$string$1", "symbols": [{"literal":"R"}, {"literal":"E"}, {"literal":"S"}, {"literal":"I"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "RESI", "symbols": ["Level", "D", "RESI$string$1", "D", "Text"]},
    {"name": "RESI", "symbols": ["RESI", "newLine", "TYPE"]},
    {"name": "FACT$string$1", "symbols": [{"literal":"F"}, {"literal":"A"}, {"literal":"C"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "FACT", "symbols": ["Level", "D", "FACT$string$1", "D", "Text"]},
    {"name": "FACT", "symbols": ["FACT", "newLine", "TYPE"]},
    {"name": "FAMILY_EVENT_DETAIL$string$1", "symbols": [{"literal":"H"}, {"literal":"U"}, {"literal":"S"}, {"literal":"B"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "FAMILY_EVENT_DETAIL$string$2", "symbols": [{"literal":"A"}, {"literal":"G"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "FAMILY_EVENT_DETAIL", "symbols": ["Level", "D", "FAMILY_EVENT_DETAIL$string$1", "newLine", "Level", "D", "FAMILY_EVENT_DETAIL$string$2"]},
    {"name": "PHRASE$string$1", "symbols": [{"literal":"P"}, {"literal":"H"}, {"literal":"R"}, {"literal":"A"}, {"literal":"S"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "PHRASE", "symbols": ["Level", "D", "PHRASE$string$1", "D", "Text"]},
    {"name": "TYPE$string$1", "symbols": [{"literal":"T"}, {"literal":"Y"}, {"literal":"P"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "TYPE", "symbols": ["Level", "D", "TYPE$string$1", "D", "Text"]}
]
  , ParserStart: "structure"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
